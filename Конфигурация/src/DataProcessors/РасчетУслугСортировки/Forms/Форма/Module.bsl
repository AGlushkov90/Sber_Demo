
#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Проводник = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Проводник.Заголовок = "Выберите файл";
	Проводник.Фильтр = "Текстовый документ (*.csv)|*.csv";
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораФайла", ЭтотОбъект);
	Проводник.Показать(Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура Загрузить(Команда)
	ЗагрузитьНаСервере();
	ПоказатьПредупреждение(, "Обработка завершена!");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПутьКФайлу = ВыбранныеФайлы[0];
		
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьНаСервере()
	
	ИндексКолонкиТипаГрузовогоМестаВФайле = 8;
	Разделитель = ",";
	КоличествоСтрокВДокументе = ?(КоличествоГрузовыхМестВДокументе = 0, 99999, КоличествоГрузовыхМестВДокументе);
	СчетчикСтрок = 0;
	СчетчикХабов = 0;
	МассивДокументовУслугаСортировкиХаб = Новый Массив;
	МассивФоновыхЗаданий = Новый Массив;
	ТаблицаСортировки = СоздатьТЗ();
	ТаблицаСортировкиХаб = СоздатьТЗ();
	Текст = Новый ЧтениеТекста(ПутьКФайлу, "UTF-8");

	СоответствиеКолонок = Новый Соответствие;
	ПолучитьСоответствиеКолонок(Текст, СоответствиеКолонок, Разделитель);
	
	СтруктураТипыГрузовыхМест = Новый Структура;
	ПолучитьСтрукрутруГрузовыхМест(СтруктураТипыГрузовыхМест);
	
	ТекСтрока = Текст.ПрочитатьСтроку();
	Пока ТекСтрока <> Неопределено Цикл
		МассивЗначений = СтрРазделить(ТекСтрока, Разделитель);
		ТипГрузовогоМеста = СтруктураТипыГрузовыхМест[МассивЗначений[ИндексКолонкиТипаГрузовогоМестаВФайле]];
		Если ТипГрузовогоМеста = ПредопределенноеЗначение("Перечисление.ТипыГрузовыхМест.Хаб") Тогда
			Если СчетчикХабов = КоличествоСтрокВДокументе Тогда
				МассивДокументовУслугаСортировкиХаб.Добавить(ТаблицаСортировкиХаб);
				ТаблицаСортировкиХаб = СоздатьТЗ();
				СчетчикХабов = 0;
			КонецЕсли;
			НовСтр = ТаблицаСортировкиХаб.Добавить();
			СчетчикХабов = СчетчикХабов + 1;
		Иначе
			Если СчетчикСтрок = КоличествоСтрокВДокументе Тогда
				МассивФоновыхЗаданий.Добавить(ЗапуститьВФоне(ТаблицаСортировки));
				ТаблицаСортировки = СоздатьТЗ();
				СчетчикСтрок = 0;
			КонецЕсли;
			НовСтр = ТаблицаСортировки.Добавить();
			СчетчикСтрок = СчетчикСтрок + 1;
		КонецЕсли;
		ЗаполнитьСтрокуДокумента(СоответствиеКолонок, МассивЗначений, НовСтр);
		РассчитатьСтрокуДокумента(НовСтр);
		ТекСтрока = Текст.ПрочитатьСтроку();
	КонецЦикла;
	МассивФоновыхЗаданий.Добавить(ЗапуститьВФоне(ТаблицаСортировки));
	МассивДокументовУслугаСортировкиХаб.Добавить(ТаблицаСортировкиХаб);
	РассчитатьТарифХабов(МассивДокументовУслугаСортировкиХаб);
	Для Каждого ТаблицаУслугаСортировкиХаб Из МассивДокументовУслугаСортировкиХаб Цикл
			МассивФоновыхЗаданий.Добавить(ЗапуститьВФоне(ТаблицаУслугаСортировкиХаб));
	КонецЦикла;	
	
	//TODO: реализовать механизм проверки состояния фоновых заданий, отмены проведения документов и т.д.
	ФоновыеЗадания.ОжидатьЗавершенияВыполнения(МассивФоновыхЗаданий);
		
КонецПроцедуры

&НаСервере
Функция СоздатьТЗ()
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("Дата_Убытие");
	ТЗ.Колонки.Добавить("Время_Убытие");
	ТЗ.Колонки.Добавить("НомерГрузовогоМеста");
	ТЗ.Колонки.Добавить("ЗаказКлиента");
	ТЗ.Колонки.Добавить("ИдентификаторЕдиницыОбработки");
	ТЗ.Колонки.Добавить("ОтпСклМс");
	ТЗ.Колонки.Добавить("Дата_Прибытие");
	ТЗ.Колонки.Добавить("Время_Прибытие");
	ТЗ.Колонки.Добавить("КодТипаОбработки");
	ТЗ.Колонки.Добавить("ДатаВремяУбытие");
	ТЗ.Колонки.Добавить("ДатаВремяПрибытие");
	ТЗ.Колонки.Добавить("КоличествоДни");
	ТЗ.Колонки.Добавить("КоличествоЧасы");
	ТЗ.Колонки.Добавить("ТипГрузовогоМеста");
	ТЗ.Колонки.Добавить("СреднедневноеКоличество");
	Возврат ТЗ;
КонецФункции

&НаСервере
Функция ЗапуститьВФоне(ТаблицаУслугаСортировки)
	МассивПараметровФонового = Новый Массив;
	МассивПараметровФонового.Добавить(ТаблицаУслугаСортировки);
	Задание = ФоновыеЗадания.Выполнить(
				"РегламентныеОперацииСервер.ПровестиДокументУслугаСортировки", МассивПараметровФонового);
	Возврат Задание;
КонецФункции

&НаСервере
Процедура ПолучитьСоответствиеКолонок (Текст, СоответствиеКолонок, Разделитель)
	
	ТекСтрока = Текст.ПрочитатьСтроку();
	Если ТекСтрока <> Неопределено Тогда
		МассивЗначений = СтрРазделить(ТекСтрока, Разделитель);
		ИндексКолонки = 0;
		Для Каждого ИмяКолонки Из МассивЗначений Цикл
			СоответствиеКолонок.Вставить(ИндексКолонки, ИмяКолонки);
			ИндексКолонки = ИндексКолонки + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьСтрукрутруГрузовыхМест(СтруктураТипыГрузовыхМест)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТипыГрузовыхМест.Ссылка КАК Значение,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ТипыГрузовыхМест.Ссылка) КАК Имя
		|ИЗ
		|	Перечисление.ТипыГрузовыхМест КАК ТипыГрузовыхМест";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураТипыГрузовыхМест.Вставить(Выборка.Имя, Выборка.Значение);
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСтрокуДокумента(СоответствиеКолонок, МассивЗначений, НовСтр)
			
		ИндексКолонки = 0;
		Для Каждого ТекЗначение Из МассивЗначений Цикл
			ИмяКолонки = СтрЗаменить(СоответствиеКолонок[ИндексКолонки], """", ""); 
			НовСтр[ИмяКолонки] = ТекЗначение;
			ИндексКолонки = ИндексКолонки + 1;
		КонецЦикла;
		НовСтр.ТипГрузовогоМеста = ТипГрузовогоМеста;
		
КонецПроцедуры	

&НаСервере
Процедура РассчитатьСтрокуДокумента(НовСтр)
	
	НовСтр.ДатаВремяПрибытие = Дата(СтрШаблон("%1%2", СтрЗаменить(НовСтр.Дата_Прибытие, "-", ""), СтрЗаменить(
		НовСтр.Время_Прибытие, ":", "")));
	НовСтр.ДатаВремяУбытие = Дата(СтрШаблон("%1%2", СтрЗаменить(НовСтр.Дата_Убытие, "-", ""), СтрЗаменить(
		НовСтр.Время_Убытие, ":", "")));
	РазницаДат = НовСтр.ДатаВремяУбытие - НовСтр.ДатаВремяПрибытие;
	НовСтр.КоличествоДни = ?(РазницаДат < 86400, 1, 
		(НачалоДня(НовСтр.ДатаВремяУбытие) - НачалоДня(НовСтр.ДатаВремяПрибытие)) / 86400);
	НовСтр.КоличествоЧасы = Цел(РазницаДат / 3600);
	Если НовСтр.ТипГрузовогоМеста = ПредопределенноеЗначение("Перечисление.ТипыГрузовыхМест.Хаб") Тогда
		СтрокиХабов = Хабы.НайтиСтроки(Новый Структура("Хаб, Месяц", Лев(НовСтр.ОтпСклМс, 4), НачалоМесяца(
			НовСтр.ДатаВремяПрибытие)));
		Если СтрокиХабов.Количество() Тогда
			СтрокаХаба = СтрокиХабов[0];
		Иначе
			СтрокаХаба = Хабы.Добавить();
			СтрокаХаба.Хаб = Лев(НовСтр.ОтпСклМс, 4);
			СтрокаХаба.Месяц = НачалоМесяца(НовСтр.ДатаВремяПрибытие);
			СтрокаХаба.ДнейВМесяце = День(КонецМесяца(СтрокаХаба.Месяц));
		КонецЕсли;
		СтрокаХаба.Количество = СтрокаХаба.Количество + 1;
	КонецЕсли;	
		
КонецПроцедуры	

&НаСервере
Процедура РассчитатьТарифХабов(МассивДокументовУслугаСортировкиХаб)
	
	Для Каждого Стз Из Хабы Цикл
		Стз.СреднедневноеКоличество = Стз.Количество / Стз.ДнейВМесяце;
	КонецЦикла;	
	
	Для Каждого Таблица Из МассивДокументовУслугаСортировкиХаб Цикл
		Для Каждого Стч Из Таблица Цикл
			СтрокиХабов = Хабы.НайтиСтроки(Новый Структура("Хаб, Месяц", Лев(Стч.ОтпСклМс, 4), НачалоМесяца(
			Стч.ДатаВремяПрибытие)));
			Если СтрокиХабов.Количество() Тогда
				Стч.СреднедневноеКоличество = СтрокиХабов[0].СреднедневноеКоличество;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры		

#КонецОбласти



	

